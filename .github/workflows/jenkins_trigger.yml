name: GitHub Actions + Jenkins Monitoring

on:
  push:
    branches:
      - main
      - develop

jobs:
  monitor-jenkins:
    runs-on: ubuntu-latest
    env:
      JENKINS_URL: ${{ secrets.JENKINS_URL }}
      JENKINS_USER: ${{ secrets.JENKINS_USER }}
      JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
      JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
      CURRENT_BRANCH: ${{ github.ref_name }}
    steps:
      - name: Monitor Jenkins Build Status Triggered by Webhook
        run: |
          BRANCH_URL_ENCODED=$(echo "$CURRENT_BRANCH" | sed 's/\//%2F/g')
          JENKINS_JOB_PATH="$JENKINS_URL/job/$JENKINS_JOB_NAME/job/$BRANCH_URL_ENCODED"
          
          echo "üîç Jenkins build for branch '$CURRENT_BRANCH' expected to be triggered by webhook."
          echo "Waiting for Jenkins to start build on $JENKINS_JOB_PATH..."
          
          # Removemos o sleep longo aqui para ver o comportamento imediato do curl
          # Se necess√°rio, podemos reintroduzi-lo ap√≥s diagnosticar o problema
          echo "Skipping long initial wait for direct curl debugging."
          
          JENKINS_BUILD_NUMBER=""
          LAST_BUILD_API_URL="$JENKINS_JOB_PATH/lastBuild/api/json"

          MAX_RETRIES_FOR_BUILD_START=10 # Reduzimos para 10 retries para um feedback mais r√°pido
          RETRY_SLEEP_SECONDS=5 # Mantemos 5 segundos entre retries
          
          for i in $(seq 1 $MAX_RETRIES_FOR_BUILD_START); do
            echo "Attempt $i/$MAX_RETRIES_FOR_BUILD_START to get last build number from $LAST_BUILD_API_URL"
          
            # =========================================================================
            # MUDAN√áAS AQUI: Adicionando -v (verbose) e capturando o HTTP_STATUS
            # =========================================================================
            CURL_OUTPUT=$(curl -v -s -w "%{http_code}" -o curl_response.txt \
            --user "$JENKINS_USER:$JENKINS_API_TOKEN" "$LAST_BUILD_API_URL" 2>&1)

            HTTP_STATUS=$(echo "$CURL_OUTPUT" | tail -n 1)
            API_RESPONSE=$(cat curl_response.txt)

            echo "DEBUG: HTTP Status for LAST_BUILD_API_URL: $HTTP_STATUS"
            echo "DEBUG: Raw API_RESPONSE content (first 500 chars): ${API_RESPONSE:0:500}"
            echo "DEBUG: Curl verbose output:"
            echo "$CURL_OUTPUT" | head -n -1 # Imprime tudo do curl -v exceto a √∫ltima linha (que √© o HTTP_STATUS)
            # =========================================================================

            if [[ "$HTTP_STATUS" -ne 200 ]]; then
              echo "‚ùå Jenkins API returned HTTP Status $HTTP_STATUS. Expected 200. Retrying in $RETRY_SLEEP_SECONDS seconds..."
              sleep $RETRY_SLEEP_SECONDS
              continue
            fi
          
            if [[ -z "$API_RESPONSE" ]]; then
              echo "‚ö†Ô∏è Jenkins API response for lastBuild is empty. Retrying in $RETRY_SLEEP_SECONDS seconds..."
              sleep $RETRY_SLEEP_SECONDS
              continue
            fi

            # Tenta validar JSON e extrair o ID
            if ! echo "$API_RESPONSE" | jq -e '.' &>/dev/null; then
              echo "‚ö†Ô∏è Jenkins API response for lastBuild is not valid JSON. Retrying in $RETRY_SLEEP_SECONDS seconds..."
              sleep $RETRY_SLEEP_SECONDS
              continue
            fi

            BUILD_ID=$(echo "$API_RESPONSE" | jq -r '.id')
          
            if [[ "$BUILD_ID" != "null" && -n "$BUILD_ID" ]]; then
              JENKINS_BUILD_NUMBER="$BUILD_ID"
              echo "‚úÖ Found Jenkins build number: $JENKINS_BUILD_NUMBER"
              break # Sai do loop de busca do ID
            else
              echo "Jenkins last build number not yet available (id is null/empty). Retrying in $RETRY_SLEEP_SECONDS seconds..."
              sleep $RETRY_SLEEP_SECONDS
            fi
          done

          if [[ -z "$JENKINS_BUILD_NUMBER" ]]; then
              echo "‚ùå Error: Could not determine Jenkins build number within expected time."
              exit 1
          fi

          echo "üîç Monitoring Jenkins build number $JENKINS_BUILD_NUMBER at $JENKINS_JOB_PATH"
          
          BUILD_URL="$JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/api/json"
          
          while true; do
            if ! command -v jq &> /dev/null; then
                echo "jq could not be found, please ensure it is installed in the runner environment."
                exit 1
            fi

            echo "Querying build status from: $BUILD_URL"
            API_RESPONSE=$(curl -s --user "$JENKINS_USER:$JENKINS_API_TOKEN" "$BUILD_URL")
          
            if [[ -z "$API_RESPONSE" ]]; then
              echo "‚ö†Ô∏è Jenkins API response is empty for build $JENKINS_BUILD_NUMBER. Retrying in 10 seconds..."
              sleep 10
              continue
            fi

            if ! echo "$API_RESPONSE" | jq -e '.' &>/dev/null; then
              echo "‚ö†Ô∏è Jenkins API response is not valid JSON for build $JENKINS_BUILD_NUMBER. Full response: $API_RESPONSE. Retrying in 10 seconds..."
              sleep 10
              continue
            fi

            STATUS=$(echo "$API_RESPONSE" | jq -r '.result')
            BUILDING=$(echo "$API_RESPONSE" | jq -r '.building')

            if [[ "$BUILDING" == "true" ]]; then
              echo "‚è≥ Jenkins build still running..."
              sleep 10
            elif [[ "$STATUS" == "SUCCESS" ]]; then
              echo "‚úÖ Jenkins Build Successful!"
              exit 0
            elif [[ "$STATUS" == "FAILURE" ]]; then
              echo "‚ùå Jenkins Build Failed!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            elif [[ "$STATUS" == "UNSTABLE" ]]; then
              echo "‚ö†Ô∏è Jenkins Build Unstable!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            elif [[ "$STATUS" == "ABORTED" ]]; then
              echo "‚õî Jenkins Build Aborted!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            else
              echo "‚ö†Ô∏è Unexpected status or not yet finished: '$STATUS' (Building: $BUILDING). Checking again in 10 seconds..."
              sleep 10
            fi
          done