name: GitHub Actions + Jenkins Integration

on:
  push:
    branches:
      - main
      - develop

jobs:
  trigger-jenkins:
    runs-on: ubuntu-latest
    outputs:
      jenkins_build_number: ${{ steps.trigger_step.outputs.build_number }}
      jenkins_job_path: ${{ steps.trigger_step.outputs.job_path }}

    steps:
      - name: Securely Trigger Jenkins Build
        id: trigger_step
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
          CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          BRANCH_URL_ENCODED=$(echo "$CURRENT_BRANCH" | sed 's/\//%2F/g')
          
          JOB_FULL_PATH="$JENKINS_URL/job/$JENKINS_JOB_NAME/job/$BRANCH_URL_ENCODED"

          echo "Attempting to trigger Jenkins job: $JOB_FULL_PATH"
          
          CURL_OUTPUT=$(curl -s -w "%{http_code}" -o output.txt \
          -i -X POST "$JOB_FULL_PATH/build" \
          --user "$JENKINS_USER:$JENKINS_API_TOKEN")

          HTTP_STATUS=$(echo "$CURL_OUTPUT" | tail -n 1)
          
          if [[ "$HTTP_STATUS" -ne 201 ]]; then
            echo "‚ùå Jenkins build trigger failed! HTTP Status: $HTTP_STATUS"
            cat output.txt
            exit 1
          fi
          
          echo "‚úÖ Jenkins build triggered successfully! HTTP Status: $HTTP_STATUS"
          
          QUEUE_ITEM_URL=$(echo "$CURL_OUTPUT" | grep -i Location | awk '{print $2}' | tr -d '\r')
          
          if [[ "$QUEUE_ITEM_URL" == *"/queue/item/"* ]]; then
            echo "Jenkins build is in queue. Monitoring queue item: $QUEUE_ITEM_URL"
            QUEUE_ITEM_ID=$(echo "$QUEUE_ITEM_URL" | sed 's|.*/queue/item/||;s|/||')
          
            while true; do
              QUEUE_STATUS=$(curl -s --user "$JENKINS_USER:$JENKINS_API_TOKEN" "$JENKINS_URL/queue/item/$QUEUE_ITEM_ID/api/json")
              EXECUTOR_URL=$(echo "$QUEUE_STATUS" | jq -r '.executable.url')
          
              if [[ "$EXECUTOR_URL" != "null" ]]; then
                JENKINS_BUILD_NUMBER=$(echo "$EXECUTOR_URL" | sed 's|.*/job/[^/]*/job/[^/]*/||;s|/.*||')
                echo "Jenkins build started with number: $JENKINS_BUILD_NUMBER"
                break
              fi
              echo "Waiting for queue item $QUEUE_ITEM_ID to start..."
              sleep 5
            done
          else
            JENKINS_BUILD_NUMBER=$(echo "$QUEUE_ITEM_URL" | sed 's|.*/||;s|/||')
            echo "Jenkins build number extracted: $JENKINS_BUILD_NUMBER"
          fi

          echo "build_number=$JENKINS_BUILD_NUMBER" >> "$GITHUB_OUTPUT"
          echo "job_path=$JOB_FULL_PATH" >> "$GITHUB_OUTPUT"


  monitor-jenkins:
    needs: trigger-jenkins
    runs-on: ubuntu-latest
    steps:
      - name: Monitor Jenkins Build Status
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JENKINS_BUILD_NUMBER: ${{ needs.trigger-jenkins.outputs.jenkins_build_number }}
          JENKINS_JOB_PATH: ${{ needs.trigger-jenkins.outputs.jenkins_job_path }}
        run: |
          echo "üîç Monitoring Jenkins build number $JENKINS_BUILD_NUMBER at $JENKINS_JOB_PATH"
          sleep 10
          
          BUILD_URL="$JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/api/json"
          
          while true; do
            if ! command -v jq &> /dev/null; then
                echo "jq could not be found, please ensure it is installed in the runner environment."
                exit 1
            fi

            API_RESPONSE=$(curl -s --user "$JENKINS_USER:$JENKINS_API_TOKEN" "$BUILD_URL")
            STATUS=$(echo "$API_RESPONSE" | jq -r '.result')
            BUILDING=$(echo "$API_RESPONSE" | jq -r '.building')

            if [[ "$BUILDING" == "true" ]]; then
              echo "‚è≥ Jenkins build still running..."
              sleep 10
            elif [[ "$STATUS" == "SUCCESS" ]]; then
              echo "‚úÖ Jenkins Build Successful!"
              exit 0
            elif [[ "$STATUS" == "FAILURE" ]]; then
              echo "‚ùå Jenkins Build Failed!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            elif [[ "$STATUS" == "UNSTABLE" ]]; then
              echo "‚ö†Ô∏è Jenkins Build Unstable!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            elif [[ "$STATUS" == "ABORTED" ]]; then
              echo "‚õî Jenkins Build Aborted!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            else
              echo "‚ö†Ô∏è Unexpected status or not yet finished: '$STATUS' (Building: $BUILDING). Checking again in 10 seconds..."
              sleep 10
            fi
          done