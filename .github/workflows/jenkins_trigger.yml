name: GitHub Actions + Jenkins Monitoring

on:
  push:
    branches:
      - main
      - develop

jobs:
  monitor-jenkins:
    runs-on: ubuntu-latest
    env:
      JENKINS_URL: ${{ secrets.JENKINS_URL }}
      JENKINS_USER: ${{ secrets.JENKINS_USER }}
      JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
      JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
      CURRENT_BRANCH: ${{ github.ref_name }}
    steps:
      - name: Monitor Jenkins Build Status Triggered by Webhook
        run: |
          BRANCH_URL_ENCODED=$(echo "$CURRENT_BRANCH" | sed 's/\//%2F/g')
          # JENKINS_JOB_PATH agora representa a base da URL para a branch espec√≠fica
          JENKINS_JOB_PATH="$JENKINS_URL/job/$JENKINS_JOB_NAME/job/$BRANCH_URL_ENCODED"
          
          echo "üîç Jenkins build for branch '$CURRENT_BRANCH' expected to be triggered by webhook."
          echo "Waiting for Jenkins to start build on $JENKINS_JOB_PATH..."
          
          # Mantemos o tempo de espera inicial, pois ainda √© importante para a sincroniza√ß√£o
          echo "Initial wait: Giving Jenkins ample time to register the new build (60 seconds)..."
          sleep 60 
          
          JENKINS_BUILD_NUMBER=""
          # URL para obter o ID do √∫ltimo build via API JSON da branch
          LAST_BUILD_API_URL="$JENKINS_JOB_PATH/lastBuild/api/json"

          MAX_RETRIES_FOR_BUILD_START=20 # Tentativas (20 * 5s = 100 segundos de retries)
          for i in $(seq 1 $MAX_RETRIES_FOR_BUILD_START); do
            echo "Attempt $i/$MAX_RETRIES_FOR_BUILD_START to get last build number from $LAST_BUILD_API_URL"
            API_RESPONSE=$(curl -s --user "$JENKINS_USER:$JENKINS_API_TOKEN" "$LAST_BUILD_API_URL")
          
            if [[ -z "$API_RESPONSE" || "$(echo "$API_RESPONSE" | jq empty 2>/dev/null)" == "" ]]; then
              echo "‚ö†Ô∏è Jenkins API response empty or invalid JSON for lastBuild. Retrying..."
              sleep 5
              continue
            fi

            BUILD_ID=$(echo "$API_RESPONSE" | jq -r '.id')
          
            if [[ "$BUILD_ID" != "null" && -n "$BUILD_ID" ]]; then
              JENKINS_BUILD_NUMBER="$BUILD_ID"
              echo "‚úÖ Found Jenkins build number: $JENKINS_BUILD_NUMBER"
              break
            else
              echo "Jenkins last build number not yet available (id is null/empty in response). Waiting for 5 seconds..."
              sleep 5
            fi
          done

          if [[ -z "$JENKINS_BUILD_NUMBER" ]]; then
              echo "‚ùå Error: Could not determine Jenkins build number within expected time."
              exit 1
          fi

          # =========================================================================
          # A √öNICA MUDAN√áA EST√Å AQUI: MONTANDO BUILD_URL COM O FORMATO EXATO QUE VOC√ä CONFIRMOU
          # =========================================================================
          echo "üîç Monitoring Jenkins build number $JENKINS_BUILD_NUMBER at $JENKINS_JOB_PATH"
          BUILD_URL="$JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/api/json" # Esta √© a URL que voc√™ confirmou!
          
          while true; do
            if ! command -v jq &> /dev/null; then
                echo "jq could not be found, please ensure it is installed in the runner environment."
                exit 1
            fi

            echo "Querying build status from: $BUILD_URL" # Adicionei este echo para depura√ß√£o
            API_RESPONSE=$(curl -s --user "$JENKINS_USER:$JENKINS_API_TOKEN" "$BUILD_URL")
          
            if [[ -z "$API_RESPONSE" ]]; then
              echo "‚ö†Ô∏è Jenkins API response is empty for build $JENKINS_BUILD_NUMBER. Retrying in 10 seconds..."
              sleep 10
              continue
            fi

            # Checar se √© JSON v√°lido antes de tentar o jq
            if ! echo "$API_RESPONSE" | jq -e '.' &>/dev/null; then
              echo "‚ö†Ô∏è Jenkins API response is not valid JSON for build $JENKINS_BUILD_NUMBER. Full response: $API_RESPONSE. Retrying in 10 seconds..."
              sleep 10
              continue
            fi

            STATUS=$(echo "$API_RESPONSE" | jq -r '.result')
            BUILDING=$(echo "$API_RESPONSE" | jq -r '.building')

            if [[ "$BUILDING" == "true" ]]; then
              echo "‚è≥ Jenkins build still running..."
              sleep 10
            elif [[ "$STATUS" == "SUCCESS" ]]; then
              echo "‚úÖ Jenkins Build Successful!"
              exit 0
            elif [[ "$STATUS" == "FAILURE" ]]; then
              echo "‚ùå Jenkins Build Failed!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            elif [[ "$STATUS" == "UNSTABLE" ]]; then
              echo "‚ö†Ô∏è Jenkins Build Unstable!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            elif [[ "$STATUS" == "ABORTED" ]]; then
              echo "‚õî Jenkins Build Aborted!"
              echo "Jenkins Build Log: $JENKINS_JOB_PATH/$JENKINS_BUILD_NUMBER/console"
              exit 1
            else
              echo "‚ö†Ô∏è Unexpected status or not yet finished: '$STATUS' (Building: $BUILDING). Checking again in 10 seconds..."
              sleep 10
            fi
          done